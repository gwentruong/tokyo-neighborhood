{"version":3,"sources":["components/InfoOverview.js","App.js","index.js"],"names":["InfoOverview","data","totalBuildings","avgBuildingArea","sumBuildingArea","landuseArea","fractionArea","styles","top","bottom","right","left","position","colorPallette","App","useState","map","setMap","mapContainer","useRef","selectedBbox","setSelectedBbox","OSMData","setOSMData","overview","setOverview","amenityFeat","setAmenityFeat","chartData","setChartData","doughnut","mapboxgl","accessToken","fetchOSM","type","bbox","dataReq","join","axios","get","url","then","res","osmtogeojson","err","console","log","useEffect","Map","container","current","style","center","maxBounds","zoom","scale","ScaleControl","maxWidth","unit","addControl","FullscreenControl","nav","NavigationControl","Draw","MapboxDraw","displayControlsDefault","controls","on","resize","addSource","features","generateId","addLayer","id","source","paint","buildingPopup","Popup","closeOnMove","closeOnClick","e","plg","turf","props","properties","keys","Object","buildingInfoComponent","key","index","div","document","createElement","ReactDOM","render","setLngLat","lngLat","setDOMContent","addTo","initializeMap","labels","values","l","colors","slice","length","datasets","label","backgroundColor","extractFeatures","includes","Math","round","buildingArea","building","reduce","a","b","getSource","setData","amenities","forEach","f","amenity","push","processOSMdata","ref","el","className","margin","background","height","padding","width","options","maintainAspectRatio","getElementById"],"mappings":"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","file":"static/js/main.711675d6.chunk.js","sourcesContent":["import React from 'react';\n\nconst InfoOverview = ({data}) => {\n    return (\n        <table>\n            <tbody>\n                <tr>\n                    <th>Number of unique buildings</th>\n                    <td>{data.totalBuildings}</td>\n                </tr>\n                <tr>\n                    <th>Average building area</th>\n                    <td>{data.avgBuildingArea} m<sup>2</sup></td>\n                </tr>\n                <tr>\n                    <th>Total buildings area</th>\n                    <td>{data.sumBuildingArea} m<sup>2</sup></td>\n                </tr>\n                <tr>\n                    <th>Landuse Area</th>\n                    <td>{data.landuseArea} m<sup>2</sup></td>\n                </tr>\n                <tr>\n                    <th>Building : Landuse Ratio</th>\n                    <td>{data.fractionArea}</td>\n                </tr>\n            </tbody>\n        </table>\n    )\n}\n\nexport default InfoOverview;","// Author: Uyen Truong, 2021\n// Contact: haiuyentruong@gmail.com\n\nimport React, { useState, useRef, useEffect, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Doughnut } from '@reactchartjs/react-chart.js';\nimport mapboxgl from \"mapbox-gl\";\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport * as turf from '@turf/turf';\nimport axios from 'axios';\nimport osmtogeojson from 'osmtogeojson';\nimport InfoOverview from './components/InfoOverview';\n\nimport './App.css';\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css'\n\nconst styles = {\n  top: \"0\",\n  bottom: \"0\",\n  right: \"0\",\n  left: \"0\",\n  position: \"absolute\"\n};\n\nconst colorPallette = [\"#54478c\",\"#2c699a\",\"#048ba8\",\"#0db39e\",\"#16db93\",\"#83e377\",\"#b9e769\",\"#efea5a\",\"#f1c453\",\"#f29e4c\"]\n\nconst App = () => {\n  const [map, setMap] = useState(null);\n  const mapContainer = useRef(null);\n  const [selectedBbox, setSelectedBbox] = useState(null);\n  const [OSMData, setOSMData] = useState(null);\n  const [overview, setOverview] = useState({})\n  const [amenityFeat, setAmenityFeat] = useState([]);\n  const [chartData, setChartData] = useState({});\n  const doughnut = useRef();\n\n  mapboxgl.accessToken = 'pk.eyJ1IjoidXllbnRydW9uZyIsImEiOiJjanVjcGN0b3IwaG5xNDNwZHJ3czRlNmJhIn0.u7o0VUuXY5f-rs4hcrwihA';\n\n  const extractFeatures = (features) => {\n    let labels = Object.keys(features);\n    let values = labels.map(l => features[l]);\n    let colors = colorPallette.slice(0, labels.length)\n\n    const data = {\n        labels: labels,\n        datasets: [\n            {\n                label: 'Amenities',\n                data: values,\n                backgroundColor: colors\n            },\n        ],\n    }\n    setChartData(data);\n}\n\n  const processOSMdata = () => {\n    if (OSMData) {\n      if (OSMData.features[0].id.includes('way')) {\n        let landuseArea = Math.round(turf.area(turf.bboxPolygon(selectedBbox)) * 100)/ 100;\n        let totalBuildings = OSMData.features.length\n        let buildingArea = OSMData.features.map(building => turf.area(building))\n        let sumBuildingArea = Math.round(buildingArea.reduce((a,b) => a + b, 0) * 100) / 100;\n        let avgBuildingArea = Math.round(sumBuildingArea * 100 /totalBuildings) / 100;\n        let fractionArea = Math.round(sumBuildingArea * 100/ landuseArea) / 100;\n        \n        if (map) {\n          map.getSource('buildings').setData(OSMData)\n        }\n        setOverview({\n          totalBuildings: totalBuildings,\n          avgBuildingArea: avgBuildingArea,\n          sumBuildingArea: sumBuildingArea,\n          landuseArea: landuseArea,\n          fractionArea: fractionArea\n        })\n      } else {\n        let features = OSMData.features;\n        let keys = [];\n        let amenities = {};\n        features.forEach(f => {\n          let amenity = f.properties.amenity;\n          if (!keys.includes(amenity)) {\n            keys.push(amenity);\n            amenities[amenity] = 1;\n          } else {\n            amenities[amenity] += 1;\n          }\n        });\n        setAmenityFeat(amenities);\n      }     \n    } \n  }\n\n  const fetchOSM = (type, bbox) => {\n    const set = type === 'building' ? 'way' : 'node';\n    const osmBbox = [bbox[1], bbox[0], bbox[3], bbox[2]]\n    const url = 'https://lz4.overpass-api.de/api/interpreter';\n    let dataReq = '[out:json];(' + set + '[' + type + '](' + osmBbox.join(',') + '););out tags geom;';\n\n    axios.get(url + '?data=' + dataReq)\n      .then(res => {\n        setOSMData(osmtogeojson(res.data))\n      },\n      err => {\n        console.log('Error');\n      })\n  }\n\n  const initializeMap = ({ setMap, mapContainer }) => {\n    const map = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/streets-v11\",\n      center: [139.757714, 35.682746],\n      maxBounds: [[139.730135,35.66863], [139.782844,35.705231]], // Chiyoda bbox\n      zoom: 15\n    });\n\n    // Scale control\n    const scale = new mapboxgl.ScaleControl({\n      maxWidth: 80,\n      unit: 'metric'\n    });\n    map.addControl(scale, 'bottom-right');\n\n    // Full screen control\n    map.addControl(new mapboxgl.FullscreenControl(), 'bottom-right');\n\n    // Add navigation control\n    const nav = new mapboxgl.NavigationControl();\n    map.addControl(nav, 'bottom-right');\n\n    // Draw control\n    var Draw = new MapboxDraw({\n      displayControlsDefault: false,\n      controls: {\n        \"polygon\": true,\n        \"trash\": true\n      }\n    })\n    map.addControl(Draw, 'top-right');\n\n    map.on(\"load\", () => {\n      setMap(map);\n      map.resize();\n\n      // Add buildings source and layers\n      map.addSource('buildings', {\n        type: 'geojson',\n        data: {\n          type: 'FeatureCollection',\n          features: []\n        },\n        generateId: true\n      })\n\n      map.addLayer({\n        id: 'buildings-fill',\n        type: 'fill',\n        source: 'buildings',\n        paint: {\n          \"fill-color\": '#b2c3ae',\n          \"fill-outline-color\": '#000',\n          \"fill-opacity\": 0.5\n        }\n      });\n\n      let buildingPopup = new mapboxgl.Popup({\n        closeOnMove: true,\n        closeOnClick: true\n      });\n\n      // Event when polygon created\n      map.on('draw.create', e => {\n        let plg = e.features[0];\n        // s,w,n,e\n        let bbox = turf.bbox(plg)\n        setSelectedBbox(bbox)\n        fetchOSM('building', bbox);\n        fetchOSM('amenity', bbox);\n      })\n\n      map.on('click', 'buildings-fill', e => {\n        let props = e.features[0].properties\n        let keys = Object.keys(props)\n\n        let buildingInfoComponent = <table>\n          <tbody>\n            {keys.map((key, index) => \n              <tr key={index}>\n                <th>{key}</th>\n                <td>{props[key]}</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n\n        var div = document.createElement(\"div\", \"popup\")\n        ReactDOM.render(buildingInfoComponent, div)\n\n        buildingPopup\n            .setLngLat(e.lngLat)\n            .setDOMContent(div)\n            .addTo(map);\n      })\n    });\n  };\n\n  useEffect(() => {\n    !map && initializeMap({ setMap, mapContainer });\n  }, [map]);\n\n\n  useEffect(() => {\n    amenityFeat && extractFeatures(amenityFeat);\n  }, [amenityFeat]);\n\n  useEffect(() => {\n    OSMData && OSMData.features && processOSMdata()\n  }, [OSMData]);\n  return (\n    <Fragment>\n      <div ref={el => (mapContainer.current = el)} style={styles} />;\n      <div className=\"overlay\" style={{margin:2, top: 5,  background: \"#fff\", height: \"100%\",  position: \"absolute\"}} >\n        <div className=\"overlay-col sidebar\" style={{padding: \"10px\"}}>\n          <div className=\"overlay-content\" style={{height: \"100%\", width: \"100%\"}}>\n            <h2>Area overview</h2>\n            {overview ? <InfoOverview data={overview} /> : null}\n            <h2>Amenties</h2>\n            {amenityFeat \n              ? <div styles={{width: \"500px\"}}><Doughnut \n                        ref={el => doughnut.current = el} \n                        data={chartData} \n                        width={200}\n                        height={400}\n                        options={{ maintainAspectRatio: false }}/></div>\n              : null}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  )\n    \n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,document.getElementById('root')\n);\n\n"],"sourceRoot":""}